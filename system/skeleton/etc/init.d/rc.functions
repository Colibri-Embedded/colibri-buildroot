#!/bin/sh

export PATH="/bin:/usr/bin:/sbin:/usr/sbin"


## Screen Dimensions
# Find current screen size
if [ -z "${COLUMNS}" ]; then
   COLUMNS=$(stty size)
   COLUMNS=${COLUMNS##* }
fi

# When using remote connections, such as a serial port, stty size returns 0
if [ "${COLUMNS}" = "0" ]; then
   COLUMNS=80
fi

## Measurements for positioning result messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Set Cursor Position Commands, used via echo
SET_COL="\e[${COL}G"      # at the $COL char
SET_WCOL="\e[${WCOL}G"    # at the $WCOL char
CURS_UP="\e[1A\\033[0G"   # Up one line, at the 0'th char
CURS_ZERO="\e[0G"

CUR_POS_X=0
CUR_POS_Y=0
CUR_POS="\e[${CUR_POS_X};${CUR_POS_Y}H"

## Set color commands, used via echo
# Please consult `man console_codes for more information
# under the "ECMA-48 Set Graphics Rendition" section
#
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font.  This does
# not affect framebuffer consoles

NORMAL="\e[0m"         # Standard console grey
SUCCESS="\e[1;32m"        # Success is green
WARNING="\e[1;33m"        # Warnings are yellow
FAILURE="\e[1;31m"        # Failures are red
INFO="\e[1;36m"           # Information is light cyan
BRACKET="\e[1;34m"        # Brackets are blue

MSG_SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
MSG_FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
MSG_WARNING_PREFIX="${WARNING} *** ${NORMAL}"

# Use a colored prefix
EMPTY_PREFIX="${BRACKET}[ ---- ${BRACKET}]${NORMAL}"
SUCCESS_PREFIX="${BRACKET}[ ${SUCCESS} OK ${BRACKET} ]${NORMAL}"
FAILURE_PREFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
WARNING_PREFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"

failed=0

store_cursor_position()
{
	if [ -t 0 ] && [ -t 1 ]; then
		old_settings=$(stty -g) || exit
		stty -icanon -echo min 0 time 3 || exit
		printf '\033[6n'
		pos=$(dd count=1 2> /dev/null)
		pos=${pos%R*}
		pos=${pos##*\[}
		x=${pos##*;} y=${pos%%;*}
		CUR_POS_X=$x
		CUR_POS_Y=$y
		stty "$old_settings"
	fi
}

success_msg()
{
	echo -e "${MSG_SUCCESS_PREFIX} ${@}"
}

failure_msg()
{
	echo -e "${MSG_FAILURE_PREFIX} ${@}"
}

warning_msg()
{
	echo -e "${MSG_WARNING_PREFIX} ${@}"
}

boot_msg()
{
    echo -e "${EMPTY_PREFIX} ${@}"
}

is_success()
{
    echo -e "${CURS_ZERO}${CURS_UP}${SUCCESS_PREFIX}"
}

is_failure()
{
    echo -e "${CURS_ZERO}${CURS_UP}${FAILURE_PREFIX}"
}

is_warning()
{
    echo -e "${CURS_ZERO}${CURS_UP}${WARNING_PREFIX}"
}

evaluate_retval()
{
	local error_value="${?}"
	
	if [ ${error_value} = 0 ]; then
		is_success
	else
		is_failure
	fi
}

wait_for_pid_end()
{
	PID=$1
	TIMEOUT=$2
	while kill -0 "$PID" &> /dev/null;do
		sleep 1
		let TIMEOUT=TIMEOUT-1
		if [ "$TIMEOUT" == "0" ]; then
			# Force close the PID process.
			kill -9 "$PID"
		fi
	done
}

wait_for_file_create()
{
	FN=$1
	TIMEOUT=$2
	while [ ! -e "$FN" ];do
		sleep 1
		let TIMEOUT=TIMEOUT-1
		if [ "$TIMEOUT" == "0" ]; then
			return
		fi
	done
}

status_of_proc()
{
	true
}
