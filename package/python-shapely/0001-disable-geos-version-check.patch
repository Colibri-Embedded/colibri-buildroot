diff -urN python-shapely-1.5.13.orig/setup.py python-shapely-1.5.13/setup.py
--- python-shapely-1.5.13.orig/setup.py	2016-08-12 13:01:41.106802370 +0200
+++ python-shapely-1.5.13/setup.py	2016-08-12 13:01:51.022609691 +0200
@@ -35,7 +35,7 @@
 
 # Get geos_version from GEOS dynamic library, which depends on
 # GEOS_LIBRARY_PATH and/or GEOS_CONFIG environment variables
-from shapely._buildcfg import geos_version_string, geos_version, \
+from shapely._buildcfg import \
         geos_config, get_geos_config
 
 logging.basicConfig()
@@ -60,14 +60,14 @@
 # Fail installation if the GEOS shared library does not meet the minimum
 # version. We ship it with Shapely for Windows, so no need to check on
 # that platform.
-log.debug('GEOS shared library: %s %s', geos_version_string, geos_version)
-if (set(sys.argv).intersection(['install', 'build', 'build_ext']) and
-        shapely_version >= Version('1.3') and
-        geos_version < (3, 3)):
-    log.critical(
-        "Shapely >= 1.3 requires GEOS >= 3.3. "
-        "Install GEOS 3.3+ and reinstall Shapely.")
-    sys.exit(1)
+#~ log.debug('GEOS shared library: %s %s', geos_version_string, geos_version)
+#~ if (set(sys.argv).intersection(['install', 'build', 'build_ext']) and
+        #~ shapely_version >= Version('1.3') and
+        #~ geos_version < (3, 3)):
+    #~ log.critical(
+        #~ "Shapely >= 1.3 requires GEOS >= 3.3. "
+        #~ "Install GEOS 3.3+ and reinstall Shapely.")
+    #~ sys.exit(1)
 
 # Handle UTF-8 encoding of certain text files.
 open_kwds = {}
@@ -159,12 +159,12 @@
     res = re.findall(r'(\d+)\.(\d+)\.(\d+)', geos_config_version_string)
     geos_config_version = tuple(int(x) for x in res[0])
 
-    if geos_config_version != geos_version:
-        log.error("The GEOS dynamic library version is %s %s,",
-                  geos_version_string, geos_version)
-        log.error("but the version reported by %s is %s %s.", geos_config,
-                  geos_config_version_string, geos_config_version)
-        sys.exit(1)
+    #~ if geos_config_version != geos_version:
+        #~ log.error("The GEOS dynamic library version is %s %s,",
+                  #~ geos_version_string, geos_version)
+        #~ log.error("but the version reported by %s is %s %s.", geos_config,
+                  #~ geos_config_version_string, geos_config_version)
+        #~ sys.exit(1)
 except OSError as ex:
     log.error(ex)
     log.error('Cannot find geos-config to get headers and check version.')
diff -urN python-shapely-1.5.13.orig/shapely/_buildcfg.py python-shapely-1.5.13/shapely/_buildcfg.py
--- python-shapely-1.5.13.orig/shapely/_buildcfg.py	2016-08-12 13:01:41.112802253 +0200
+++ python-shapely-1.5.13/shapely/_buildcfg.py	2016-08-12 13:01:56.670499944 +0200
@@ -17,7 +17,7 @@
 import re
 import subprocess
 import sys
-
+import platform
 
 # Add message handler to this module's logger
 log = logging.getLogger(__name__)
@@ -129,120 +129,122 @@
 
 # Platform-specific attempts, and build `free` object
 
-def load_dll(libname, fallbacks=None):
-    lib = find_library(libname)
-    dll = None
-    if lib is not None:
-        try:
-            log.debug("Trying `CDLL(%s)`", lib)
-            dll = CDLL(lib)
-        except OSError:
-            log.warn("Failed `CDLL(%s)`", lib)
-            pass
-
-    if not dll and fallbacks is not None:
-        for name in fallbacks:
-            try:
-                log.debug("Trying `CDLL(%s)`", name)
-                dll = CDLL(name)
-            except OSError:
-                # move on to the next fallback
-                log.warn("Failed `CDLL(%s)`", name)
-                pass
-
-    if dll:
-        log.debug("Library path: %r", lib or name)
-        log.debug("DLL: %r", dll)
-        return dll
-    else:
-        # No shared library was loaded. Raise OSError.
-        raise OSError(
-            "Could not find library {0} or load any of its variants {1}".format(
-                libname, fallbacks or []))
-
-
-if sys.platform.startswith('linux'):
-    if not lgeos:
-        lgeos = load_dll('geos_c',
-                         fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
-    free = load_dll('c').free
-    free.argtypes = [c_void_p]
-    free.restype = None
-
-elif sys.platform == 'darwin':
-    if not lgeos:
-        if hasattr(sys, 'frozen'):
-            # .app file from py2app
-            alt_paths = [os.path.join(os.environ['RESOURCEPATH'],
-                         '..', 'Frameworks', 'libgeos_c.dylib')]
-        else:
-            alt_paths = [
-                # The Framework build from Kyng Chaos
-                "/Library/Frameworks/GEOS.framework/Versions/Current/GEOS",
-                # macports
-                '/opt/local/lib/libgeos_c.dylib',
-            ]
-        lgeos = load_dll('geos_c', fallbacks=alt_paths)
-
-    free = load_dll('c', fallbacks=['/usr/lib/libc.dylib']).free
-    free.argtypes = [c_void_p]
-    free.restype = None
-
-elif sys.platform == 'win32':
-    if not lgeos:
-        try:
-            egg_dlls = os.path.abspath(
-                os.path.join(os.path.dirname(__file__), "DLLs"))
-            wininst_dlls = os.path.abspath(os.__file__ + "../../../DLLs")
-            original_path = os.environ['PATH']
-            os.environ['PATH'] = "%s;%s;%s" % \
-                (egg_dlls, wininst_dlls, original_path)
-            lgeos = CDLL("geos.dll")
-        except (ImportError, WindowsError, OSError):
-            raise
-
-    def free(m):
-        try:
-            cdll.msvcrt.free(m)
-        except WindowsError:
-            # TODO: http://web.archive.org/web/20070810024932/
-            #     + http://trac.gispython.org/projects/PCL/ticket/149
-            pass
-
-elif sys.platform == 'sunos5':
-    if not lgeos:
-        lgeos = load_dll('geos_c',
-                         fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
-    free = CDLL('libc.so.1').free
-    free.argtypes = [c_void_p]
-    free.restype = None
-
-else:  # other *nix systems
-    if not lgeos:
-        lgeos = load_dll('geos_c',
-                         fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
-    free = load_dll('c', fallbacks=['libc.so.6']).free
-    free.argtypes = [c_void_p]
-    free.restype = None
+#~ def load_dll(libname, fallbacks=None):
+    #~ lib = find_library(libname)
+    #~ dll = None
+    #~ if lib is not None:
+        #~ try:
+            #~ log.debug("Trying `CDLL(%s)`", lib)
+            #~ dll = CDLL(lib)
+        #~ except OSError:
+            #~ log.warn("Failed `CDLL(%s)`", lib)
+            #~ pass
+
+    #~ if not dll and fallbacks is not None:
+        #~ for name in fallbacks:
+            #~ try:
+                #~ log.debug("Trying `CDLL(%s)`", name)
+                #~ dll = CDLL(name)
+            #~ except OSError:
+                #~ # move on to the next fallback
+                #~ log.warn("Failed `CDLL(%s)` @ %s", name, platform.machine() )
+                #~ tmp = os.getenv('_python_sysroot')
+                #~ print('_python_sysroot:', tmp)
+                #~ pass
+
+    #~ if dll:
+        #~ log.debug("Library path: %r", lib or name)
+        #~ log.debug("DLL: %r", dll)
+        #~ return dll
+    #~ else:
+        #~ # No shared library was loaded. Raise OSError.
+        #~ raise OSError(
+            #~ "Could not find library {0} or load any of its variants {1}".format(
+                #~ libname, fallbacks or []))
+
+
+#~ if sys.platform.startswith('linux'):
+    #~ if not lgeos:
+        #~ lgeos = load_dll('geos_c',
+                         #~ fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
+    #~ free = load_dll('c').free
+    #~ free.argtypes = [c_void_p]
+    #~ free.restype = None
+
+#~ elif sys.platform == 'darwin':
+    #~ if not lgeos:
+        #~ if hasattr(sys, 'frozen'):
+            #~ # .app file from py2app
+            #~ alt_paths = [os.path.join(os.environ['RESOURCEPATH'],
+                         #~ '..', 'Frameworks', 'libgeos_c.dylib')]
+        #~ else:
+            #~ alt_paths = [
+                #~ # The Framework build from Kyng Chaos
+                #~ "/Library/Frameworks/GEOS.framework/Versions/Current/GEOS",
+                #~ # macports
+                #~ '/opt/local/lib/libgeos_c.dylib',
+            #~ ]
+        #~ lgeos = load_dll('geos_c', fallbacks=alt_paths)
+
+    #~ free = load_dll('c', fallbacks=['/usr/lib/libc.dylib']).free
+    #~ free.argtypes = [c_void_p]
+    #~ free.restype = None
+
+#~ elif sys.platform == 'win32':
+    #~ if not lgeos:
+        #~ try:
+            #~ egg_dlls = os.path.abspath(
+                #~ os.path.join(os.path.dirname(__file__), "DLLs"))
+            #~ wininst_dlls = os.path.abspath(os.__file__ + "../../../DLLs")
+            #~ original_path = os.environ['PATH']
+            #~ os.environ['PATH'] = "%s;%s;%s" % \
+                #~ (egg_dlls, wininst_dlls, original_path)
+            #~ lgeos = CDLL("geos.dll")
+        #~ except (ImportError, WindowsError, OSError):
+            #~ raise
+
+    #~ def free(m):
+        #~ try:
+            #~ cdll.msvcrt.free(m)
+        #~ except WindowsError:
+            #~ # TODO: http://web.archive.org/web/20070810024932/
+            #~ #     + http://trac.gispython.org/projects/PCL/ticket/149
+            #~ pass
+
+#~ elif sys.platform == 'sunos5':
+    #~ if not lgeos:
+        #~ lgeos = load_dll('geos_c',
+                         #~ fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
+    #~ free = CDLL('libc.so.1').free
+    #~ free.argtypes = [c_void_p]
+    #~ free.restype = None
+
+#~ else:  # other *nix systems
+    #~ if not lgeos:
+        #~ lgeos = load_dll('geos_c',
+                         #~ fallbacks=['libgeos_c.so.1', 'libgeos_c.so'])
+    #~ free = load_dll('c', fallbacks=['libc.so.6']).free
+    #~ free.argtypes = [c_void_p]
+    #~ free.restype = None
 
 # TODO: what to do with 'free'? It isn't used.
 
 
-def _geos_version():
-    # extern const char GEOS_DLL *GEOSversion();
-    GEOSversion = lgeos.GEOSversion
-    GEOSversion.restype = c_char_p
-    GEOSversion.argtypes = []
-    # #define GEOS_CAPI_VERSION "@VERSION@-CAPI-@CAPI_VERSION@"
-    geos_version_string = GEOSversion()
-    if sys.version_info[0] >= 3:
-        geos_version_string = geos_version_string.decode('ascii')
-
-    res = re.findall(r'(\d+)\.(\d+)\.(\d+)', geos_version_string)
-    assert len(res) == 2, res
-    geos_version = tuple(int(x) for x in res[0])
-    capi_version = tuple(int(x) for x in res[1])
+#~ def _geos_version():
+    #~ # extern const char GEOS_DLL *GEOSversion();
+    #~ GEOSversion = lgeos.GEOSversion
+    #~ GEOSversion.restype = c_char_p
+    #~ GEOSversion.argtypes = []
+    #~ # #define GEOS_CAPI_VERSION "@VERSION@-CAPI-@CAPI_VERSION@"
+    #~ geos_version_string = GEOSversion()
+    #~ if sys.version_info[0] >= 3:
+        #~ geos_version_string = geos_version_string.decode('ascii')
+
+    #~ res = re.findall(r'(\d+)\.(\d+)\.(\d+)', geos_version_string)
+    #~ assert len(res) == 2, res
+    #~ geos_version = tuple(int(x) for x in res[0])
+    #~ capi_version = tuple(int(x) for x in res[1])
 
-    return geos_version_string, geos_version, capi_version
+    #~ return geos_version_string, geos_version, capi_version
 
-geos_version_string, geos_version, geos_capi_version = _geos_version()
+#~ geos_version_string, geos_version, geos_capi_version = _geos_version()
